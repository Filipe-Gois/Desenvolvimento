https://www.youtube.com/watch?v=Mp1NphMm7YU

definição: css dentro do javascript



como baixar:
{
    npm i --save styled-components

}

Button.style.jsx {
colocar esse ".style" para indicar que é um componente de estilo
}

criação do componente: 
{

import styled from "styled-components";
import React from 'react';

const StyleButton = styled.button`
/* adicionar os estilos aqui*/
color: #fff;

`

export default StyleButton;
}




extensão para deixar as propriedades coloridas igual no css comum: vscode-styled-components



pseudo classes e pseudo elementos em css: {

    usar dentro do próprio componente

    pseudo-classe:
    {
    usar "&:hover {}" 
    }

    pseudo-elemento:
    {
    usar "&::after {}" 
    }

    exemplo:
    {
    import styled from "styled-components";

  export const StyledButton = styled.button`
  border: none;
  background: none;
  border-top: 3px solid #000;
  cursor: pointer;
  z-index: 3;
  max-width: 20%;

  &::after,
  &::before {
    content: "";
    display: block;
    width: 30px;
    height: 3px;
    background-color: #000;
    margin-top: 5px;
    position: relative;
    transform: 0.3s;
  }
`;

    }

}


Wrapper: é a "div que envolve todo o conteúdo do site (tipo um container ou View no React Native)"


*ACHO MELHOR USAR O COMPONENTE 'MAIN' DO HTML*

como selecionar elementos dentro de um container:
{
    utilizar o "&" e colocar o elemento que deseja

    exemplo:
    {

    export const Wrapper = styled.div`
  background-color: grey;
  width: 100%;
  height: 100vh;

  & a {
    text-decoration: none;
    color: #00ff00;
  }
`;
 }
}


como utilizar propriedades específicas em um componente "ex: button--red":
{
    usar uma arrow function js para especificar dentro da tag a function do styled components


    exemplo:
    {
        export const StyledButton = styled.button`
  background-color: ${(prop) => prop.backgroundColor ? prop.backgroundColor : "red"};   /* caso o backgroundColor não for definido, será aplicada a cor padrão (vermelho)*/
  width: 100px;
  height: 40px;
  cursor: pointer;

  &:hover {
    background-color: pink;
    transition: 0.5s ease-out;
  }
`;

    }
}


como estilizar um componente já existente: 
{

    

    *ADICIONAR UMA PROP DESTRUCTURING À PROPRIEDADE CLASSNAME NO COMPONENTE JÁ EXISTENTE*
    {
      exemplo: 
      const ButtonEstilizado = ({ className, children }) => {
    return <button className={className}>{children}</button>;
    };
    }


    passar o componente já existente como parametro do método styled
    exemplo:
    {

  export const ButtonStyledBrown = styled(ButtonEstilizado)`
  background-color: #ff00dd;
  width: 100px;
  height: 40px;


  @media screen and (min-width: 768px) {
    background-color: ${({ theme }) => theme.colors.primary};
    width: 100%;
  }


`;
    }
}




como criar estilo global: {

    criar este componente e aplicar os estilos globais:
    {
        import { createGlobalStyle } from "styled-components";

    export const GlobalStyle = createGlobalStyle`
    *{
    margin: 0;
    padding:0;
    box-sizing: border-box;
    }


`;

    }


    Importar esse componente na index.js 
    {

import { GlobalStyle } from './components/GlobalStyle.style';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <GlobalStyle />
    <App />
  </React.StrictMode>
);
    }
}



criar temas (é como criar variáveis com os valores pré-definidos de cores, tamanhos, etc):
{
    criar o componente Theme e adiciona-lo ao componente ThemeProvider como parâmetro, envolvendo o componente app e o GlobalStyle  na index.js:
    {

import { GlobalStyle } from './components/GlobalStyle.style';
import { ThemeProvider } from 'styled-components';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <ThemeProvider theme={Theme}>  ----
    <GlobalStyle />
      <App />
    </ThemeProvider> ----
  </React.StrictMode>
);


    }
}


*RESPONSIVIDADE É DO MESMO JEITO QUE O CSS NORMAL!*